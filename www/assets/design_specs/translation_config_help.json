{
  "spider_rules_help": "These settings control the Spider's behavior.",
  "spider_rules": {
    "start_uris": "Array of strings: The starting URLs for the spider. These starting URLs are required in order for the Spider to start crawling.",
    "sitemap": "string: An additional sitemap to use for spidering. Can be used in conjunction with the 'use_sitemaps' Control.",
    "truncate_urls_at": "Array of strings: List of regex patterns matching parts of URLs from which should be truncated. Used to determine what URLs should be considered the same page. *** This rule is obeyed by both the Spider and OneLink JS ***",
    "truncate_url_hash": "boolean: Whether to truncate URLs at the Hash Tag (#). Default is true. *** This rule is obeyed by both the Spider and OneLink JS ***",
    "remove_url_param": "Array of strings: Query parameter key names that should be removed from URLs. Used to determine what URLs should be considered the same page. *** This rule is obeyed by both the Spider and OneLink JS ***",
    "use_sitemaps": "boolean: Whether to use any sitemaps found on the Starting URL sites. If true, the sitemaps in robots.txt file will be used and the standard domain.com sitemap.xml will be searched for.",
    "robots": "boolean: Whether to search for and use the robots.txt file located on the Starting URL sites.",
    "follow_links": "boolean: Whether the spider should follow any links it finds on pages.",
    "find_js_links": "boolean: Whether the spider should apply advanced diagnostics to find references to links on a page that are not href's.",
    "capture_text": "boolean: Whether the spider should capture text Blocks into the database. Used for projects like Med Lit where they only want to download assets and do not want HTML Segments.",
    "check_meta_robots": "boolean: Whether to obey the 'nofollow' directives for the robots meta tag or link ref='nofollow' directive.",
    "enable_images": "boolean: Whether to capture images from pages in addition to the text blocks.",
    "download_assets": "Array of strings: One or more of 'pdf','word','xls','csv'. Tells the spider to capture downloadable content of these types as an Asset. The range of file types possibly captured are 'pdf, doc, docm, dotm, docx, dotx, xls, xlam, xlsb, xlsm, xltm, xlsx, xltx, csv'.",
    "crawl_delay": "integer: The crawl delay in milliseconds. How long the spider will wait to crawl a page after loading the previous page.",
    "max_pending": "integer: The maximum permitted number of concurrent crawler page requests to a domain.",
    "max_uri_recursion": "integer: The maximum level of recursion that is allowed in a URI before the crawler will abandon an attempt to follow a link. Ex: https://example.com/abc/abc/abc/abc/",
    "headers": "object: Additional Headers to include in the URL request when crawling links.",
    "login": "object: Username and Password for Basic Auth login when crawling links.",
    "login_all_pages": "boolean: Whether the 'login_page_js' should be executed on every new page the spider visits or just executed once at the beginning. By default the 'login_page_js' is executed once at the beginning and then the sites cookies are applied to all future pages that are visited. This works fine for cookies that are long lived and expire in the future. If the cookies are Session cookies or very short lived, then setting 'login_all_pages' to true will cause the spider to execute the 'login_page_js' on every page it visits. Please don't set this value to true unless you understand the websites login cookies and functionality. Executing the 'login_page_js' on every page is time consuming and costly.",
    "login_page_js": "Array of objects: Each object has either an 'async' or 'sync' key whose value is hexified JavaScript. Each object's javascript is executed in the order of this list as separate steps. An optional 'wait_msecs' can be specified as a time to wait after executing the JavaScript. JavaScript of type 'sync' runs synchronously and returns after execution completes. JavaScript of type 'async' runs asynchronously, meaning it won't return until a callback function is called from the JavaScript (see examples).",
    "query_selector_clicks": "Array of objects: Each object has a 'U' URL regex pattern and a 'selectors' Array. 'selectors' is an Array of strings to be used in JavaScript for calls to document.querySelector() to identify an Element to 'click' on the page, usually a button. The purpose is to click items that will bring more content onto the page. Items are 'clicked' in the list order. Care should be taken to NOT click any item that would cause the page to navigate elsewhere.",
    "dynamic_scroll": "object: Controls for auto-scrolling pages before parsing the DOM.",
    "walk_delay_mseconds": "integer: Number of milliseconds to wait before parsing the DOM.",
    "exclude_uris": "Array of strings: List of regex patterns matching an URL path and query parameters to exclude from scope. *** This rule is obeyed by both the Spider and OneLink JS ***",
    "include_uris": "Array of strings: List of regex patterns matching an URL path and query parameters to include in scope. This is an override to the 'exclude_uris' rule. The special key word 'OLJS_START_URIS' can be used to indicate that the paths for all the 'start_uris' should be added into this array. *** This rule is obeyed by both the Spider and OneLink JS ***",
    "include_domains": "key/value pairs: List of additional domains allowed to spider. The key is the domain name (wildpanel is supported). The value is an object that optionally contains override settings for any of the following (use_sitemaps, robots, follow_links, find_js_links, capture_text, check_meta_robots, download_assets, crawl_delay, max_pending, max_uri_recursion, headers, login, login_page_js, query_selector_clicks, dynamic_scroll, walk_delay_mseconds).",
    "exclude_domains": "Array of strings: List of domain patterns to exclude. This is an override to the 'include_domains' rule. By default everything not included by 'include_domains' will be excluded."
  },
  "translation_rules_help": "These settings control behavior for parsing DOMs and translating web pages.",
  "translation_rules": {
    "no_translate": "Array of objects: DUTICX identifiers specified as regex patterns for marking DOM objects as DO NOT TRANSLATE.",
    "translate": "Array of objects: DUTICX identifiers specified as regex patterns for marking DOM objects as TRANSLATE THIS. These are overrides to the 'no_translate' rules",
    "selective_translate": "Array of objects: DUX config objects of elements for marking DOM objects as TRANSLATE ONLY THIS.  When this is used, only DOM objects identified by this rule are translated. ALL other DOM content is completely ignored.  Only supports X CSS Selectors, will warn and ignore TIC config values.",
    "no_pseudo_translate": "Array of objects: DUTICX identifiers specified as regex patterns for marking pseudo objects (CSS ::before and ::after) as DO NOT TRANSLATE.",
    "pseudo_translate": "Array of objects: DUTICX identifiers specified as regex patterns for marking pseudo objects (CSS ::before and ::after) as TRANSLATE THIS. These are overrides to the 'no_pseudo_translate' rules",
    "iframe_notrans": "Array of objects: Each object has a 'U' URL regex pattern and a 'location' string with a regex pattern for marking iframes as DO NOT TRANSLATE.  The 'location' regex will be matched to the iframes's contentWindow.location.href JS property if available (same domain) or, if not, the iframe's src url.",
    "no_image_translate": "Array of objects: DUTICX identifiers specified as regex patterns for marking images in the DOM as DO NOT TRANSLATE. By default no images are translated unless the 'enable_images' spider_rules option is set to 'true'.",
    "image_translate": "Array of objects: DUTICX identifiers specified as regex patterns for marking images in the DOM as TRANSLATE THIS. These are overrides to the 'no_image_translate' rules",
    "ignore_hidden": "Array of objects: DUX config objects of elements that will not be walked or translated until visible in the viewport.  Only supports X CSS Selectors, will warn and ignore TIC config values. Useful for modals or below the fold content that might never need translating.",
    "ignore_dom": "Array of objects: DUX config objects of elements that will not be walked.  Only supports X CSS Selectors, will warn and ignore TIC config values. WARNING: translate rules will never evaluate for anything matching the X selector and there is no override.",
    "ignore_slots": "Array of objects: DUTICX config objects of elements where a slot and its assigned nodes will not be walked.",
    "no_ami": "key/value pairs: List of DUTIC (not DUTICX) identifiers specified as regex patterns for marking DOM objects as DO NOT AMI. The key is a regex pattern for a domain to match. The value is an array of UTIC identifier objects whose values are optional.",
    "ami_selective": "boolean: (default false) If set to true, OneLink JS will NOT collect AMI on the page.  Normal AMI processing can then be selectively re-enabled by setting a cookie 'selective_ami=true'. Note: this will not override any 'no_ami' settings. See the no_ami parameter for more details.",
    "auto_detect": "Array of objects: DUTICX identifiers specified as regex patterns for marking DOM objects as 'Auto Detect Language' when using MT as a translation method. The use of the 'OneLinkAuto' class in the HTML is also supported as an alternative to this configuration setting.",
    "suppress_mt": "Array of objects: DUTICX identifiers specified as regex patterns for marking DOM objects as DO NOT USE MT (or DDT) TO TRANSLATE THIS.",
    "suppress_cache": "Array of objects: DUTICX identifiers specified as regex patterns for marking DOM objects as DO NOT USE THE CACHE when translating this.",
    "set_as_block_tag": "Array of objects: DUTICX identifiers specified via regex patterns or as a list of strings in the tags property, or both. Treat the targeted DOM elements or tags as 'block tags' instead of 'inline tags' while parsing the DOM.",
    "set_as_inline_tag": "Array of objects: DUTICX identifiers specified via regex patterns or as a list of strings in the tags property, or both. Treat the targeted DOM elements or tags as 'inline tags' instead of 'block tags' while parsing the DOM.",
    "block_patterns": "Array of objects: Each object has DUTICX identifiers and a 'pattern' value specified as regex patterns. The 'pattern' value is used to separate a single string into individual Blocks. For example, breadcrumb text 'home > products > drills' will have 'home' be one captured block, 'products' be another block and 'drills' be a third block.",
    "walk_delay_mseconds": "integer: Number of milliseconds to wait after DOMContentLoaded before parsing the DOM. This takes precedence over 'adaptive_walk_delay'.",
    "adaptive_walk_delay": "boolean: Wait before parsing the DOM by dynamically watching DOM activity to determine when the page 'settles down'.",
    "max_adaptive_delay_mseconds": "integer: Maximum number of milliseconds to wait while performing 'adaptive_walk_delay'.",
    "stats_mseconds": "integer: Number of milliseconds to wait before sending TranslateStats to XAPIS.",
    "tokenize_numbers": "boolean: Whether or not to tokenize numbers.",
    "hide_dynamic_content": "boolean: Whether or not to hide new DOM objects when the Mutation Observer sees them get created.",
    "remove_html_tags": "Array of objects: List of objects containing DUTICX identifiers specified as regex patterns. Each object also contains an array called 'tags' specifying tags to remove from the matched block specified by the DUTICX.  All child nodes of the tags are consolidated into the parent block.",
    "throttle_dynamic_content": "boolean: (default false) Whether to throttle (technically debounce) translations triggered by mutation observers.",
    "throttle_delay_msecs": "number: (default 50) Time in ms to throttle_dynamic_content.  This number cannot be higher than 5000ms.",
    "keep_active_element": "boolean: (default true) When applying translations it will detect and refocus if the document.activeElement was changed.  Note that this will cause any focus event handlers to re-run.  Default is true, set to false to disable this feature across all pages.",
    "disable_trust_check": "boolean: (default false) Disable the OneLink JS check for checking events as being 'trusted' before translating a page.",
    "no_tokenize": "Array of objects: DUTICX identifiers specified as regex patterns for marking DOM objects as DO NOT TOKENIZE. The value is an array of DUTICX identifier objects whose values are optional. One or more of the 'type' and 'pattern' properties are required. The type property should be one of custom|dates|timezones|time|numbers to specify the tokenization type to skip. The pattern property is a regex pattern to specify which string patterns should not be tokenized. If the 'type' property is not specified, the 'pattern' regex skip tokenization will apply to all types (custom|dates|timezones|time|numbers).",
    "tokenize_patterns": "Array of objects: List of objects containing DUTICX identifiers specified as regex patterns. Each object also contains either 'patterns' or 'cookie_from and cookie_to'. 'patterns' is a regex pattern to match for tokenizing. 'cookie_from' and 'cookie_to' values are names of Cookies which contain a from and to string mapping for tokenizing.  For example, if a your site has 'Welcome: ' text followed by the users name, you can use the pattern '(?<=Welcome: ).+' to tokenize all text that follows the 'Welcome:'.  The text 'Welcome: John Doe' would become 'Welcome: {token}'.  The 'cookie_from and cookie_to' are primarily used by the Custom JavaScript for tokenizing Reverse Search Terms. In the example, if a user searched on a site for 'agua', a cookie 'oljssearchterm' can be set to have a value of 'water' and a cookie 'oljssearchtermtx' can be set to have a value of 'agua' in the custom JavaScript code.  The text 'Large water containers' would become 'Large {token} containers'.  The translation for that token would be 'agua', which would come from the 'oljssearchtermtx' cookie value.",
    "translate_attributes": "Array of objects: List of objects containing DUTICX identifiers and a list of strings which represent attribute names that should be translated. By default, 'alt', 'title' and 'placeholder' attributes are translated (they do not need to be specified in this config setting)",
    "no_translate_attributes": "Array of objects: List of objects containing DUTICX identifiers and a list of strings which represent attribute names that should NOT be translated. These are overrides for the 'translate_attributes'",
    "translate_inputvalue": "Array of objects: List of objects containing DUTICX identifiers of input or textarea elements with a value prop that should be translated. HTML input or textarea value properties are not reflected in HTML attributes and hence the need for this config param. This should be used when a translated and readonly form is displayed and the form is loaded dynamically.",
    "no_translate_inputvalue": "Array of objects: List of objects containing DUTICX identifiers of input elements with a value that should NOT be translated. These are overrides for the 'translate_inputvalues'",
    "language_selector": "Array of objects: DUTICX identifiers specified as regex patterns for identifying a DOM object in which a Language Selector will be inserted. The first matching DUTICX will be the DOM object selected. A 'position' property with a value of 'first' or 'last' specifies whether to insert the Language Selector as the first child of the DOM object or the last child. Default is 'last'. An optional 'type' property with a value of 'glgo' will create the GLGO-style language selector as opposed to the default simple SELECT object. You can define CSS Styles in the Target Language Custom CSS for this language selector.",
    "language_selector_labels": "Array of objects: List of Languages to appear in the 'language_selector'. Each object has one key/value pair where the keys are the deployment_values defined for the Languages and the value is the label.",
    "disable_shadowroot_prototype": "boolean: (default false) Disable Moxie overwriting of HTMLElement.attachShadowRoot prototype which checks for new shadow roots, and replace with a simple walk/search of the DOM and all existing shadow roots every \"shadowroot_poll_msecs\".",
    "shadowroot_poll_msecs": "integer: (default 3000) Time in ms for the poll interval for \"disable_shadowroot_prototype\", which checks for new shadow roots in the document and recursively down into existing shadow roots.",
    "treat_as_shadowroot": "Array of strings: List of property names that will be treated as shadow roots if found on nodes while walking DOM.  This is useful for sites that use a custom shadow root implementation.  Note that regular shadowRoot will always be used if set and that the property value must point to a real shadow root DocumentFragment object."
  },
  "staging_translation_rules_help": "These settings are the exact same settings as 'translation_rules' but will override those rules with these if the current pages URL contains the query parameter 'onelinkjs_staging=1'.",
  "staging_translation_rules": {},
  "flatten_rules_help": "These settings control behavior for the /xapis/Flatten API.",
  "flatten_rules": {
    "headers": "Array of objects: Each object has DU identifiers specified via regex patterns and a 'values' property which specifies an object of key/value pairs as Headers to set when visiting websites for flatting content capture.",
    "cookies": "Array of objects: Each object has DU identifiers specified via regex patterns and a 'values' property which specifies an object of key/value pairs as Cookies to set when visiting websites for flatting content capture."
  }
}
